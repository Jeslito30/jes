//package LinkedList;
public class LinkedList{
    class Node{
        int intData;
        String stringData;
        Node next;
        Node(int data){
            this.intData = data;
            this.next = null;
        }
        Node(String data){
            this.stringData = data;
        }
    }
    private Node head;

    LinkedList(){
        this.head = null;
    }
    public void insertAtBeginning(int intData) {
		Node newNode = new Node(intData);
		newNode.next=head;
		head = newNode;
		
	}
    public void insertAtBeginning(String stringData) {
		Node newNode = new Node(stringData);
		newNode.next=head;
		head = newNode;
		
	}
    public void insertAtEnd(int intData) {
		Node newNode = new Node(intData);
		
		if(head == null) {
			head=newNode;
			return;
		}
		Node current = head;
		while(current.next!=null) {
			current = current.next;
		}
		current.next = newNode;
		
	}
    public void insertAtEnd(String stringData) {
		Node newNode = new Node(stringData);
		
		if(head == null) {
			head=newNode;
			return;
		}
		Node current = head;
		while(current.next!=null) {
			current = current.next;
		}
		current.next = newNode;
		
	}

    public void deleteDataAtIndex(int index) {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        Node temp = head;
		if(index ==0) {
			head = temp.next;
			return;
		}
		for(int i = 0; temp !=null && i<index - 1; i++) {
			temp = temp.next;
		}
		if(temp==null || temp.next ==null)return;
		
		Node next = temp.next.next;
		temp.next = next;
    }
    public void deleteData(int intData) {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        if (head.intData == intData) {
            head = head.next;
            return;
        }
        Node current = head;
        
        while (current.next != null && current.next.intData != intData) {
            current = current.next;
        }
        if (current.next != null) {
            current.next = current.next.next;
        } else {
            System.out.println("Node with value " + intData + " not found.");
        }
    }
    public void deleteData(String stringData) {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        if (head.stringData == stringData) {
            head = head.next;
            return;
        }
        Node current = head;

        while (current.next != null && current.next.stringData != stringData) {
            current = current.next;
        }
        if (current.next != null) {
            current.next = current.next.next;
        } else {
            System.out.println("Node with value " + stringData + " not found.");
        }
    }
    public String search(int intData) {
        Node current = head;
        int index = 0;  

        while (current != null) {
            if (current.intData == intData) {
                return "Searching for: "+ "\""+ intData +"\"" +"\nStatus: In progress..... "+"\nSearch Complete"+"\nResult: The data was found, located at index " + index;
            }
            current = current.next;
            index++;
        }

        return "Searching for: "+ "\""+ intData +"\"" +"\nStatus: In progress..... "+"\nSearch Complete"+"\nResult: The data was not found"; 
    }
    public String search(String stringData) {
        Node current = head;
        int index = 0;  

        
        while (current != null) {
            if (current.stringData == stringData) {
                return "Searching for: "+ "\""+ stringData +"\"" +"\nStatus: In progress..... "+"\nSearch Complete"+"\nResult: The data was found, located at index " + index;
            }
            current = current.next;
            index++;
        }

        return "Searching for: "+ "\""+ stringData +"\"" +"\nStatus: In progress..... "+"\nSearch Complete"+"\nResult: The data was not found";  
    }
    public void displayIntData() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        while (current != null) {
            System.out.print(current.intData + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
    public void displayStringData() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        while (current != null) {
            System.out.print(current.stringData + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

		
	
    
    


    public static void main(String[] args) {
        LinkedList brandList = new LinkedList();
        System.out.println("Brands of Cars: ");
        brandList.insertAtBeginning("Ford");
        brandList.insertAtBeginning("Toyota");
        brandList.insertAtEnd("Honda");
        brandList.insertAtBeginning("Tesla");
        brandList.insertAtBeginning("Ferrari");
        brandList.insertAtBeginning("Lamborghini");

        brandList.displayStringData();
        System.out.println(brandList.search("Honda"));
        
        System.out.println();
        brandList.deleteData("Toyota");
        brandList.displayStringData();

        System.out.println();
        brandList.deleteDataAtIndex(0);
        brandList.displayStringData();
        
        System.out.println(brandList.search("Toyota"));

        System.out.println();
        System.out.println();
        System.out.println();
        System.out.println();

        LinkedList score = new LinkedList();
        score.insertAtBeginning(90);
        score.insertAtEnd(81);
        score.insertAtBeginning(62);
        score.insertAtEnd(83);
        score.insertAtBeginning(96);
        score.insertAtEnd(100);
        score.insertAtBeginning(70);
        score.insertAtEnd(95);
        
        score.displayIntData();
        System.out.println(score.search(100));

        System.out.println();
        score.deleteData(100);
        score.displayIntData();
        System.out.println(score.search(100));

        System.out.println();
        score.deleteDataAtIndex(3);
        score.displayIntData();




    
    }
}
